rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidBooking() {
      return request.resource.data.keys().hasAll(['userId', 'doctorId', 'date', 'status'])
        && request.resource.data.userId == request.auth.uid;
    }
    
    function isValidOrder() {
      return request.resource.data.keys().hasAll(['userId', 'items', 'status', 'createdAt'])
        && request.resource.data.userId == request.auth.uid;
    }

    // Chat history rules
    match /users/{userId}/chats/{chatId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    // Booking rules
    match /bookings/{bookingId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        resource.data.doctorId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles
      );
      allow create: if isAuthenticated() && isValidBooking();
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.doctorId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles
      );
    }

    // Order rules
    match /orders/{orderId} {
      allow read: if isOwner(resource.data.userId);
      allow create: if isAuthenticated() && isValidOrder();
    }
  }
}
